VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cDIBSection"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Private Const BI_RGB                                    As Long = 0
Private Const BI_RLE4                                   As Long = 2
Private Const BI_RLE8                                   As Long = 1
Private Const DIB_RGB_COLORS                            As Long = 0
Private Const BITMAPTYPE                                As Long = &H4D42
Private Const INVALID_HANDLE_VALUE                      As Long = -1
Private Const CREATE_ALWAYS                             As Long = 2
Private Const GENERIC_READ                              As Long = &H80000000
Private Const GENERIC_WRITE                             As Long = &H40000000
Private Const FILE_ATTRIBUTE_ARCHIVE                    As Long = &H20
Private Const FILE_ATTRIBUTE_COMPRESSED                 As Long = &H800
Private Const FILE_ATTRIBUTE_DIRECTORY                  As Long = &H10
Private Const FILE_ATTRIBUTE_HIDDEN                     As Long = &H2
Private Const FILE_ATTRIBUTE_NORMAL                     As Long = &H80
Private Const FILE_ATTRIBUTE_READONLY                   As Long = &H1
Private Const FILE_ATTRIBUTE_SYSTEM                     As Long = &H4
Private Const FILE_ATTRIBUTE_TEMPORARY                  As Long = &H100
Private Const FILE_BEGIN                                As Long = 0
Private Const GMEM_FIXED                                As Long = &H0
Private Const GMEM_ZEROINIT                             As Long = &H40
Private Const GPTR                                      As Double = (GMEM_FIXED Or GMEM_ZEROINIT)
Private Const FORMAT_MESSAGE_ALLOCATE_BUFFER            As Long = &H100
Private Const FORMAT_MESSAGE_ARGUMENT_ARRAY             As Long = &H2000
Private Const FORMAT_MESSAGE_FROM_HMODULE               As Long = &H800
Private Const FORMAT_MESSAGE_FROM_STRING                As Long = &H400
Private Const FORMAT_MESSAGE_FROM_SYSTEM                As Long = &H1000
Private Const FORMAT_MESSAGE_IGNORE_INSERTS             As Long = &H200
Private Const FORMAT_MESSAGE_MAX_WIDTH_MASK             As Long = &HFF

Private Type SAFEARRAYBOUND
    cElements                                           As Long
    lLbound                                             As Long
End Type

Private Type SAFEARRAY2D
    cDims                                               As Integer
    fFeatures                                           As Integer
    cbElements                                          As Long
    cLocks                                              As Long
    pvData                                              As Long
    Bounds(0 To 1)                                      As SAFEARRAYBOUND
End Type

Private Type RGBQUAD
    rgbBlue                                             As Byte
    rgbGreen                                            As Byte
    rgbRed                                              As Byte
    rgbReserved                                         As Byte
End Type

Private Type BITMAPINFOHEADER
    biSize                                              As Long
    biWidth                                             As Long
    biHeight                                            As Long
    biPlanes                                            As Integer
    biBitCount                                          As Integer
    biCompression                                       As Long
    biSizeImage                                         As Long
    biXPelsPerMeter                                     As Long
    biYPelsPerMeter                                     As Long
    biClrUsed                                           As Long
    biClrImportant                                      As Long
End Type

Private Type BITMAPINFO
    bmiHeader                                           As BITMAPINFOHEADER
    bmiColors                                           As RGBQUAD
End Type

Private Type BITMAP
    bmType                                              As Long
    bmWidth                                             As Long
    bmHeight                                            As Long
    bmWidthBytes                                        As Long
    bmPlanes                                            As Integer
    bmBitsPixel                                         As Integer
    bmBits                                              As Long
End Type

Private Type BITMAPFILEHEADER
    bfType                                              As Integer
    bfSize                                              As Long
    bfReserved1                                         As Integer
    bfReserved2                                         As Integer
    bfOffBits                                           As Long
End Type


Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (lpvDest As Any, _
                                                                     lpvSource As Any, _
                                                                     ByVal cbCopy As Long)

Private Declare Function VarPtrArray Lib "msvbvm50.dll" Alias "VarPtr" (Ptr() As Any) As Long

Private Declare Function CreateCompatibleDC Lib "gdi32" (ByVal hdc As Long) As Long

Private Declare Function GetDC Lib "user32" (ByVal hwnd As Long) As Long

Private Declare Function GetDesktopWindow Lib "user32" () As Long

Private Declare Function CreateDIBSection Lib "gdi32" (ByVal hdc As Long, _
                                                       pBitmapInfo As BITMAPINFO, _
                                                       ByVal un As Long, _
                                                       lplpVoid As Long, _
                                                       ByVal handle As Long, _
                                                       ByVal dw As Long) As Long

Private Declare Function BitBlt Lib "gdi32" (ByVal hDestDC As Long, _
                                             ByVal x As Long, _
                                             ByVal y As Long, _
                                             ByVal nWidth As Long, _
                                             ByVal nHeight As Long, _
                                             ByVal hSrcDC As Long, _
                                             ByVal xSrc As Long, _
                                             ByVal ySrc As Long, _
                                             ByVal dwRop As Long) As Long

Private Declare Function SelectObject Lib "gdi32" (ByVal hdc As Long, _
                                                   ByVal hObject As Long) As Long

Private Declare Function DeleteObject Lib "gdi32" (ByVal hObject As Long) As Long

Private Declare Function DeleteDC Lib "gdi32" (ByVal hdc As Long) As Long

Private Declare Function LoadImage Lib "user32" Alias "LoadImageA" (ByVal hInst As Long, _
                                                                    ByVal lpsz As String, _
                                                                    ByVal un1 As Long, _
                                                                    ByVal n1 As Long, _
                                                                    ByVal n2 As Long, _
                                                                    ByVal un2 As Long) As Long

Private Declare Function GetObjectAPI Lib "gdi32" Alias "GetObjectA" (ByVal hObject As Long, _
                                                                      ByVal nCount As Long, _
                                                                      lpObject As Any) As Long

Private Declare Function CreateFile Lib "kernel32" Alias "CreateFileA" (ByVal lpFileName As String, _
                                                                        ByVal dwDesiredAccess As Long, _
                                                                        ByVal dwShareMode As Long, _
                                                                        lpSecurityAttributes As Any, _
                                                                        ByVal dwCreationDisposition As Long, _
                                                                        ByVal dwFlagsAndAttributes As Long, _
                                                                        ByVal hTemplateFile As Long) As Long

Private Declare Function ReadFile Lib "kernel32" (ByVal hFile As Long, _
                                                  lpBuffer As Any, _
                                                  ByVal nNumberOfBytesToRead As Long, _
                                                  lpNumberOfBytesRead As Long, _
                                                  lpOverlapped As Any) As Long

Private Declare Function WriteFile Lib "kernel32" (ByVal hFile As Long, _
                                                   lpBuffer As Any, _
                                                   ByVal nNumberOfBytesToWrite As Long, _
                                                   lpNumberOfBytesWritten As Long, _
                                                   lpOverlapped As Any) As Long

Private Declare Function SetFilePointer Lib "kernel32" (ByVal hFile As Long, _
                                                        ByVal lDistanceToMove As Long, _
                                                        lpDistanceToMoveHigh As Long, _
                                                        ByVal dwMoveMethod As Long) As Long

Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long

Private Declare Function GlobalLock Lib "kernel32" (ByVal hMem As Long) As Long

Private Declare Function GlobalAlloc Lib "kernel32" (ByVal wFlags As Long, _
                                                     ByVal dwBytes As Long) As Long

Private Declare Function GlobalFree Lib "kernel32" (ByVal hMem As Long) As Long

Private Declare Function GlobalUnlock Lib "kernel32" (ByVal hMem As Long) As Long

Private Declare Function FormatMessage Lib "kernel32" Alias "FormatMessageA" (ByVal dwFlags As Long, _
                                                                              lpSource As Any, _
                                                                              ByVal dwMessageId As Long, _
                                                                              ByVal dwLanguageId As Long, _
                                                                              ByVal lpBuffer As String, _
                                                                              ByVal nSize As Long, _
                                                                              Arguments As Long) As Long

Private Declare Function GetDIBits Lib "gdi32" (ByVal aHDC As Long, _
                                                ByVal hBitmap As Long, _
                                                ByVal nStartScan As Long, _
                                                ByVal nNumScans As Long, _
                                                lpBits As Long, _
                                                lpBI As BITMAPINFO, _
                                                ByVal wUsage As Long) As Long

Private Declare Function CreateDIBitmap Lib "gdi32" (ByVal hdc As Long, _
                                                     lpInfoHeader As BITMAPINFOHEADER, _
                                                     ByVal dwUsage As Long, _
                                                     lpInitBits As Any, _
                                                     lpInitInfo As BITMAPINFO, _
                                                     ByVal wUsage As Long) As Long

Private Declare Function DrawDibOpen Lib "msvfw32.dll" () As Long

Private Declare Function DrawDibClose Lib "msvfw32.dll" (ByVal hDD As Long) As Long

Private Declare Function DrawDibDraw Lib "msvfw32.dll" (ByVal hDD As Long, _
                                                        ByVal hdc As Long, _
                                                        ByVal xDst As Long, _
                                                        ByVal yDst As Long, _
                                                        ByVal dxDst As Long, _
                                                        ByVal dyDst As Long, _
                                                        lpBI As Any, _
                                                        lpBits As Any, _
                                                        ByVal xSrc As Long, _
                                                        ByVal ySrc As Long, _
                                                        ByVal dxSrc As Long, _
                                                        ByVal dySrc As Long, _
                                                        ByVal wFlags As Long) As Long


Private m_hDIb                                    As Long
Private m_hBmpOld                                 As Long
Private m_hDC                                     As Long
Private m_hDD                                     As Long
Private m_lPtr                                    As Long
Private m_tBI                                     As BITMAPINFO


Public Property Get BytesPerScanLine() As Long
' Scans must align on dword boundaries:
    BytesPerScanLine = (m_tBI.bmiHeader.biWidth * 3 + 3) And &HFFFFFFFC
End Property

Public Property Get DIBSectionBitsPtr() As Long
    DIBSectionBitsPtr = m_lPtr
End Property

Public Property Get hdc() As Long
    hdc = m_hDC
End Property

Public Property Get hDib() As Long
    hDib = m_hDIb
End Property

Public Property Get Height() As Long
    Height = m_tBI.bmiHeader.biHeight
End Property

Public Property Get UseDrawDib() As Boolean
    UseDrawDib = Not (m_hDD = 0)
End Property

Public Property Let UseDrawDib(ByVal bState As Boolean)
    If bState Then
        If m_hDD = 0 Then
            m_hDD = DrawDibOpen()
        End If
    Else
        If Not (m_hDD = 0) Then
            DrawDibClose m_hDD
        End If
    End If
End Property

Public Property Get Width() As Long
    Width = m_tBI.bmiHeader.biWidth
End Property

Private Function ApiError(ByVal e As Long) As String

Dim s       As String
Dim c       As Long

    s = String$(256, 0)
    c = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM Or FORMAT_MESSAGE_IGNORE_INSERTS, 0, e, 0&, s, Len(s), ByVal 0)
    If c Then
        ApiError = left(s, c)
    End If

End Function

Public Function Create(ByVal lWidth As Long, _
                       ByVal lHeight As Long) As Boolean

Dim bDrawDib    As Boolean

    bDrawDib = UseDrawDib()
    ClearUp
    m_hDC = CreateCompatibleDC(0)
    If m_hDC <> 0 Then
        If (CreateDIB(m_hDC, lWidth, lHeight, m_hDIb)) Then
            m_hBmpOld = SelectObject(m_hDC, m_hDIb)
            UseDrawDib = bDrawDib
            Create = True
        Else
            DeleteObject m_hDC
            m_hDC = 0
        End If
    End If

End Function

Public Function CreateDIB(ByVal lHDC As Long, _
                          ByVal lWidth As Long, _
                          ByVal lHeight As Long, _
                          ByRef hDib As Long) As Boolean
    
    With m_tBI.bmiHeader
        .biSize = Len(m_tBI.bmiHeader)
        .biWidth = lWidth
        .biHeight = lHeight
        .biPlanes = 1
        .biBitCount = 24
        .biCompression = BI_RGB
        .biSizeImage = BytesPerScanLine * .biHeight
    End With
    
    hDib = CreateDIBSection(lHDC, m_tBI, DIB_RGB_COLORS, m_lPtr, 0, 0)
    CreateDIB = (hDib <> 0)

End Function

Public Sub CreateFromPicture(ByRef picThis As StdPicture)

Dim lHDC            As Long
Dim lhDCDesktop     As Long
Dim lhBmpOld        As Long
Dim tBMP            As BITMAP

    GetObjectAPI picThis.handle, Len(tBMP), tBMP
    If (Create(tBMP.bmWidth, tBMP.bmHeight)) Then
        lhDCDesktop = GetDC(GetDesktopWindow())
        If lhDCDesktop <> 0 Then
            lHDC = CreateCompatibleDC(lhDCDesktop)
            DeleteDC lhDCDesktop
            If lHDC <> 0 Then
                lhBmpOld = SelectObject(lHDC, picThis.handle)
                LoadPictureBlt lHDC
                SelectObject lHDC, lhBmpOld
                DeleteObject lHDC
            End If
        End If
    End If
    
End Sub

Private Function FileErrHandler(ByVal lR As Long, _
                                ByVal lSize As Long, _
                                ByVal lBytes As Long) As Boolean
    
    If (lR = 0) Or Not (lSize = lBytes) Then
        FileErrHandler = True
    End If
    
End Function

Public Sub LoadPictureBlt(ByVal lHDC As Long, _
                          Optional ByVal lSrcLeft As Long = 0, _
                          Optional ByVal lSrcTop As Long = 0, _
                          Optional ByVal lSrcWidth As Long = -1, _
                          Optional ByVal lSrcHeight As Long = -1, _
                          Optional ByVal eRop As RasterOpConstants = vbSrcCopy)
    If lSrcWidth < 0 Then
        lSrcWidth = m_tBI.bmiHeader.biWidth
    End If
    If lSrcHeight < 0 Then
        lSrcHeight = m_tBI.bmiHeader.biHeight
    End If
    BitBlt m_hDC, 0, 0, lSrcWidth, lSrcHeight, lHDC, lSrcLeft, lSrcTop, eRop
    
End Sub

Public Sub PaintPicture(ByVal lHDC As Long, _
                        Optional ByVal lDestLeft As Long = 0, _
                        Optional ByVal lDestTop As Long = 0, _
                        Optional ByVal lDestWidth As Long = -1, _
                        Optional ByVal lDestHeight As Long = -1, _
                        Optional ByVal lSrcLeft As Long = 0, _
                        Optional ByVal lSrcTop As Long = 0, _
                        Optional ByVal eRop As RasterOpConstants = vbSrcCopy)

    If lDestWidth < 0 Then
        lDestWidth = m_tBI.bmiHeader.biWidth
    End If
    If lDestHeight < 0 Then
        lDestHeight = m_tBI.bmiHeader.biHeight
    End If
    If Not (m_hDD = 0) Then
        DrawDibDraw m_hDD, lHDC, lDestLeft, lDestTop, lDestWidth, lDestHeight, m_tBI, ByVal m_lPtr, lSrcLeft, lSrcTop, lDestWidth, lDestHeight, 0
    Else
        BitBlt lHDC, lDestLeft, lDestTop, lDestWidth, lDestHeight, m_hDC, lSrcLeft, lSrcTop, eRop
    End If

End Sub

Public Sub RandomiseBits(Optional ByVal bGray As Boolean = False)

Dim bDib()  As Byte
Dim x       As Long
Dim y       As Long
Dim lC      As Long
Dim xEnd    As Long
Dim tSA     As SAFEARRAY2D

    ' Get the bits in the from DIB section:
    With tSA
        .cbElements = 1
        .cDims = 2
        .Bounds(0).lLbound = 0
        .Bounds(0).cElements = m_tBI.bmiHeader.biHeight
        .Bounds(1).lLbound = 0
        .Bounds(1).cElements = BytesPerScanLine()
        .pvData = m_lPtr
    End With
    CopyMemory ByVal VarPtrArray(bDib()), VarPtr(tSA), 4

    ' random:
    Randomize Timer

    xEnd = (Width - 1) * 3
    If bGray Then
        For y = 0 To m_tBI.bmiHeader.biHeight - 1
            For x = 0 To xEnd Step 3
                lC = Rnd * 255
                bDib(x, y) = lC
                bDib(x + 1, y) = lC
                bDib(x + 2, y) = lC
            Next x
        Next y
    Else
        For x = 0 To xEnd Step 3
            For y = 0 To m_tBI.bmiHeader.biHeight - 1
                bDib(x, y) = 0
                bDib(x + 1, y) = Rnd * 255
                bDib(x + 2, y) = Rnd * 255
            Next y
        Next x
    End If

    CopyMemory ByVal VarPtrArray(bDib), 0&, 4

End Sub

Public Function Resample(ByVal lNewHeight As Long, _
                         ByVal lNewWidth As Long) As cDIBSection

Dim cDib As cDIBSection
    Set cDib = New cDIBSection
    If cDib.Create(lNewWidth, lNewHeight) Then
        If (lNewWidth <> m_tBI.bmiHeader.biWidth) Or (lNewHeight <> m_tBI.bmiHeader.biHeight) Then
            ' Change in size, do resample:
            ResampleDib cDib
        Else
            ' No size change so just return a copy:
            cDib.LoadPictureBlt m_hDC
        End If
        Set Resample = cDib
    End If

End Function

Private Function ResampleDib(ByRef cDibTo As cDIBSection) As Boolean

Dim bDibFrom()  As Byte
Dim bDibTo()    As Byte
Dim x           As Long
Dim y           As Long
Dim xEnd        As Long
Dim xOut        As Long
Dim ifY         As Long
Dim ifX         As Long
Dim r           As Long
Dim g           As Long
Dim b           As Long
Dim ir1         As Long
Dim ig1         As Long
Dim ib1         As Long
Dim ir2         As Long
Dim ig2         As Long
Dim ib2         As Long
Dim b1          As Single
Dim b2          As Single
Dim b3          As Single
Dim b4          As Single
Dim g1          As Single
Dim g2          As Single
Dim g3          As Single
Dim g4          As Single
Dim r1          As Single
Dim r2          As Single
Dim r3          As Single
Dim r4          As Single
Dim dX          As Single
Dim dy          As Single
Dim fX          As Single
Dim fY          As Single
Dim xScale      As Single
Dim yScale      As Single
Dim tSAFrom     As SAFEARRAY2D
Dim tSATo       As SAFEARRAY2D

    ' Get the bits in the from DIB section:
    With tSAFrom
        .cbElements = 1
        .cDims = 2
        .Bounds(0).lLbound = 0
        .Bounds(0).cElements = m_tBI.bmiHeader.biHeight
        .Bounds(1).lLbound = 0
        .Bounds(1).cElements = BytesPerScanLine()
        .pvData = m_lPtr
    End With
    CopyMemory ByVal VarPtrArray(bDibFrom()), VarPtr(tSAFrom), 4

    ' Get the bits in the to DIB section:
    With tSATo
        .cbElements = 1
        .cDims = 2
        .Bounds(0).lLbound = 0
        .Bounds(0).cElements = cDibTo.Height
        .Bounds(1).lLbound = 0
        .Bounds(1).cElements = cDibTo.BytesPerScanLine()
        .pvData = cDibTo.DIBSectionBitsPtr
    End With
    CopyMemory ByVal VarPtrArray(bDibTo()), VarPtr(tSATo), 4

    With cDibTo
        xScale = (Width - 1) / .Width
        yScale = (Height - 1) / .Height
        xEnd = .Width - 1
        For y = 0 To .Height - 1
            fY = y * yScale
            ifY = Int(fY)
            dy = fY - ifY
            For x = 0 To xEnd
                fX = x * xScale
                ifX = Int(fX)
                dX = fX - ifX
                ifX = ifX * 3
                ' Interpolate using the four nearest pixels in the source
                b1 = bDibFrom(ifX, ifY)
                g1 = bDibFrom(ifX + 1, ifY)
                r1 = bDibFrom(ifX + 2, ifY)
                b2 = bDibFrom(ifX + 3, ifY)
                g2 = bDibFrom(ifX + 4, ifY)
                r2 = bDibFrom(ifX + 5, ifY)
                b3 = bDibFrom(ifX, ifY + 1)
                g3 = bDibFrom(ifX + 1, ifY + 1)
                r3 = bDibFrom(ifX + 2, ifY + 1)
                b4 = bDibFrom(ifX + 3, ifY + 1)
                g4 = bDibFrom(ifX + 4, ifY + 1)
                r4 = bDibFrom(ifX + 5, ifY + 1)
                ' Interplate in x direction:
                ir1 = r1 * (1 - dy) + r3 * dy
                ig1 = g1 * (1 - dy) + g3 * dy
                ib1 = b1 * (1 - dy) + b3 * dy
                ir2 = r2 * (1 - dy) + r4 * dy
                ig2 = g2 * (1 - dy) + g4 * dy
                ib2 = b2 * (1 - dy) + b4 * dy
                ' Interpolate in y:
                r = ir1 * (1 - dX) + ir2 * dX
                g = ig1 * (1 - dX) + ig2 * dX
                b = ib1 * (1 - dX) + ib2 * dX

                ' Set output:
                If r < 0 Then r = 0
                If r > 255 Then r = 255
                End If
                If g < 0 Then g = 0
                If g > 255 Then g = 255
                If b < 0 Then b = 0
                If b > 255 Then b = 255
                xOut = x * 3
                bDibTo(xOut, y) = b
                bDibTo(xOut + 1, y) = g
                bDibTo(xOut + 2, y) = r
            Next x
        Next y
    End With

    CopyMemory ByVal VarPtrArray(bDibFrom), 0&, 4
    CopyMemory ByVal VarPtrArray(bDibTo), 0&, 4

End Function

Public Function SavePicture(ByVal sFileName As String) As Boolean

Dim lC As Long
Dim i  As Long

    SavePicture = SaveToBitmap(m_lPtr, sFileName)

End Function

Private Function SaveToBitmap(ByVal lPtrBits As Long, _
                              ByVal sFileName As String)

Dim bErr            As Boolean
Dim hFile           As Long
Dim lBytesWritten   As Long
Dim lSize           As Long
Dim lR              As Long
Dim hMem            As Long
Dim lPtr            As Long
Dim lErr            As Long
Dim tBH             As BITMAPFILEHEADER
Dim tRGBQ           As RGBQUAD

    ' Prepare the BITMAPFILEHEADER
    With tBH
        .bfType = BITMAPTYPE
        .bfOffBits = 14 + Len(m_tBI)
        .bfSize = .bfOffBits + m_tBI.bmiHeader.biSizeImage
    End With
    hFile = CreateFile(sFileName, GENERIC_READ Or GENERIC_WRITE, ByVal 0&, ByVal 0&, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0)
    lErr = Err.LastDllError
    If hFile = INVALID_HANDLE_VALUE Then
        Err.Raise 17, App.EXEName & ".cDIBSection", ApiError(lErr)
    Else
        hMem = GlobalAlloc(GPTR, 14)
        lPtr = GlobalLock(hMem)
        CopyMemory ByVal lPtr, tBH.bfType, 2
        CopyMemory ByVal lPtr + 2, tBH.bfSize, 4
        CopyMemory ByVal lPtr + 6, 0&, 4
        CopyMemory ByVal lPtr + 10, tBH.bfOffBits, 4
        lSize = 14
        lR = WriteFile(hFile, ByVal lPtr, lSize, lBytesWritten, ByVal 0&)
        GlobalUnlock hMem
        GlobalFree hMem
        ' Add the BITMAPINFOHEADER and colour palette:
        bErr = FileErrHandler(lR, lSize, lBytesWritten)
        If Not bErr Then
            lSize = Len(m_tBI)
            lR = WriteFile(hFile, m_tBI, lSize, lBytesWritten, ByVal 0&)
            bErr = FileErrHandler(lR, lSize, lBytesWritten)
        End If
        If Not bErr Then
            ' Its easy to write the bitmap data, though...
            lSize = m_tBI.bmiHeader.biSizeImage
            lR = WriteFile(hFile, ByVal lPtrBits, lSize, lBytesWritten, ByVal 0&)
            bErr = FileErrHandler(lR, lSize, lBytesWritten)
        End If
        CloseHandle hFile
        SaveToBitmap = Not (bErr)
    End If

End Function

Public Sub ClearUp()

    If m_hDC <> 0 Then
        If m_hDIb <> 0 Then
            SelectObject m_hDC, m_hBmpOld
            DeleteObject m_hDIb
        End If
        DeleteObject m_hDC
    End If
    m_hDC = 0
    m_hDIb = 0
    m_hBmpOld = 0
    m_lPtr = 0
    If Not (m_hDD = 0) Then
        DrawDibClose m_hDD
        m_hDD = 0
    End If

End Sub

Private Sub Class_Terminate()
    ClearUp
End Sub


